name: CI

on:
  # We run CI on pushes to the main branch
  push:
    branches:
      - main
  # and on all pull requests to the main branch
  pull_request:
    branches:
      - main
  # as well as upon manual triggers through the 'Actions' tab of the Github UI
  workflow_dispatch:

env:
  CATCH2_VERSION: 3.6.0

jobs:
  build-and-test:
    name: Testing on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Cache Catch2 (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      id: cache-catch2-linux
      with:
        path: |
          ~/catch2-build
          /usr/local/lib/cmake/Catch2
          /usr/local/include/catch2
          /usr/local/lib/libCatch2*
        key: catch2-${{ env.CATCH2_VERSION }}-linux-${{ runner.os }}-${{ runner.arch }}-${{ github.ref }}

    - name: Cache Catch2 (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      id: cache-catch2-windows
      with:
        path: |
          ~/catch2-build
          C:\Program Files (x86)\Catch2
        key: catch2-${{ env.CATCH2_VERSION }}-windows-${{ runner.os }}-${{ runner.arch }}-${{ github.ref }}

    - name: Install CUDA Toolkit (Linux)
      if: runner.os == 'Linux'
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit-linux
      with:
        cuda: '12.5.0'
        method: 'local'
        use-github-cache: true
        log-file-suffix: 'linux.txt'

    - name: Install CUDA Toolkit (Windows)
      if: runner.os == 'Windows'
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit-windows
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: false
        log-file-suffix: 'windows.txt'
        
    - name: Fallback CUDA installation (Windows)
      if: runner.os == 'Windows' && failure()
      shell: pwsh
      run: |
        Write-Output "Primary CUDA installation failed, trying fallback..."
        # Download CUDA installer directly
        $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/12.5.1/network_installers/cuda_12.5.1_windows_network.exe"
        $cudaInstaller = "$env:TEMP\cuda_installer.exe"
        Write-Output "Downloading CUDA installer..."
        Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
        Write-Output "Installing CUDA toolkit..."
        Start-Process -FilePath $cudaInstaller -ArgumentList "-s", "nvcc_12.5", "cuobjdump_12.5", "nvprune_12.5", "cupti_12.5", "cublas_dev_12.5", "cudart_12.5", "cufft_dev_12.5", "curand_dev_12.5", "cusolver_dev_12.5", "cusparse_dev_12.5", "thrust_12.5", "visual_studio_integration_12.5" -Wait
        # Add CUDA to PATH
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\bin"
        echo "$cudaPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify CUDA installation
      shell: bash
      run: |
        echo "Verifying CUDA installation..."
        # Try multiple ways to verify CUDA
        if command -v nvcc >/dev/null 2>&1; then
          echo "nvcc found in PATH"
          nvcc --version
        elif [ -f "/usr/local/cuda/bin/nvcc" ]; then
          echo "nvcc found in /usr/local/cuda/bin"
          /usr/local/cuda/bin/nvcc --version
        elif [ -f "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.5/bin/nvcc.exe" ]; then
          echo "nvcc found in Windows CUDA path"
          "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.5/bin/nvcc.exe" --version
        else
          echo "Warning: nvcc not found, but continuing with build..."
          echo "PATH contents:"
          echo $PATH
          echo "Searching for nvcc:"
          find /usr -name nvcc 2>/dev/null || echo "nvcc not found in /usr"
          if [ "${{ runner.os }}" == "Windows" ]; then
            ls "C:/Program Files/NVIDIA GPU Computing Toolkit/" 2>/dev/null || echo "CUDA not found in standard Windows location"
          fi
        fi

    - name: Install Catch2 (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ ! -d "/usr/local/lib/cmake/Catch2" ] || [ "${{ steps.cache-catch2-linux.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss or Catch2 not found, installing Catch2..."
          # Clean up any existing directory
          rm -rf ~/catch2-build
          git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git ~/catch2-build
          cd ~/catch2-build
          mkdir build
          cd build
          cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCATCH_INSTALL_DOCS=OFF ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
        else
          echo "Catch2 already installed from cache."
        fi

    - name: Install Catch2 (Windows)  
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (-not (Test-Path "C:\Program Files (x86)\Catch2") -or "${{ steps.cache-catch2-windows.outputs.cache-hit }}" -ne "true") {
          Write-Output "Cache miss or Catch2 not found, installing Catch2..."
          # Clean up any existing directory
          if (Test-Path "~/catch2-build") { Remove-Item -Recurse -Force "~/catch2-build" }
          git clone -b v$Env:CATCH2_VERSION https://github.com/catchorg/Catch2.git ~/catch2-build
          cd ~/catch2-build
          mkdir build
          cd build
          cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCATCH_INSTALL_DOCS=OFF ..
          cmake --build . --target install --config Release
        } else {
          Write-Output "Catch2 already installed from cache."
        }

    - name: Update library cache (Linux)
      if: runner.os == 'Linux'
      run: sudo ldconfig

    - name: make build directory
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: configure cmake (Linux)
      if: runner.os == 'Linux'
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_DOCS=OFF \
          -DBUILD_TESTING=ON \
          -DCMAKE_PREFIX_PATH="/usr/local"

    - name: configure cmake (Windows)
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOCS=OFF -DBUILD_TESTING=ON

    - name: build
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake --build . --parallel

    - name: run tests
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure --parallel

  python-testing:
    name: Python package testing on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit (Linux)
      if: runner.os == 'Linux'
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit-linux
      with:
        cuda: '12.5.0'
        method: 'local'
        use-github-cache: true
        log-file-suffix: 'python-linux.txt'

    - name: Install CUDA Toolkit (Windows)
      if: runner.os == 'Windows'
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit-windows
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: false
        log-file-suffix: 'python-windows.txt'
        
    - name: Fallback CUDA installation (Windows) - Python
      if: runner.os == 'Windows' && failure()
      shell: pwsh
      run: |
        Write-Output "Primary CUDA installation failed in python-testing, trying fallback..."
        # Download CUDA installer directly
        $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/12.5.1/network_installers/cuda_12.5.1_windows_network.exe"
        $cudaInstaller = "$env:TEMP\cuda_installer.exe"
        Write-Output "Downloading CUDA installer..."
        Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
        Write-Output "Installing CUDA toolkit..."
        Start-Process -FilePath $cudaInstaller -ArgumentList "-s", "nvcc_12.5", "cuobjdump_12.5", "nvprune_12.5", "cupti_12.5", "cublas_dev_12.5", "cudart_12.5", "cufft_dev_12.5", "curand_dev_12.5", "cusolver_dev_12.5", "cusparse_dev_12.5", "thrust_12.5", "visual_studio_integration_12.5" -Wait
        # Add CUDA to PATH
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\bin"
        echo "$cudaPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Run Python tests
      shell: bash
      run: |
        python -m pip install .
        python -m pip install -r requirements-dev.txt
        pytest

  coverage-test:
    name: Coverage Testing
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - uses: actions/checkout@v4

    - name: Cache Catch2 (Coverage)
      uses: actions/cache@v4
      id: cache-catch2-coverage
      with:
        path: |
          ~/catch2-build
          /usr/local/lib/cmake/Catch2
          /usr/local/include/catch2
          /usr/local/lib/libCatch2*
        key: catch2-${{ env.CATCH2_VERSION }}-coverage-linux-${{ github.ref }}

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: true
        log-file-suffix: 'coverage-ubuntu.txt'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Install Catch2 with proper configuration
      run: |
        if [ ! -d "/usr/local/lib/cmake/Catch2" ] || [ "${{ steps.cache-catch2-coverage.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss or Catch2 not found, installing Catch2..."
          # Clean up any existing directory
          rm -rf ~/catch2-build
          git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git ~/catch2-build
          cd ~/catch2-build
          mkdir build
          cd build
          cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCATCH_INSTALL_DOCS=OFF ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
        else
          echo "Catch2 already installed from cache."
        fi

    - name: Update library cache
      run: sudo ldconfig

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install scikit-build-core pybind11[global]

    - name: Clean any existing builds
      run: |
        rm -rf ${{ github.workspace }}/build*
        
    - name: Configure and build with coverage
      run: |
        mkdir -p ${{ github.workspace }}/build_coverage
        cd ${{ github.workspace }}/build_coverage
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_DOCS=OFF \
          -DBUILD_TESTING=ON \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_C_FLAGS="--coverage" \
          -DCMAKE_PREFIX_PATH="/usr/local" \
          -G "Unix Makefiles"
        cmake --build . --parallel

    - name: Install Python package in development mode
      run: |
        echo "Available CMake generators:"
        cmake --help | grep -A 20 "Generators" || true
        echo "Building Python package..."
        python -m pip install --no-build-isolation \
          --config-settings=build-dir="${{ github.workspace }}/build_python" \
          --config-settings=cmake.define.CMAKE_CXX_FLAGS="--coverage" \
          --config-settings=cmake.define.CMAKE_C_FLAGS="--coverage" \
          --config-settings=cmake.define.BUILD_TESTING="OFF" \
          --config-settings=cmake.define.BUILD_PYTHON="ON" \
          --config-settings=cmake.define.CMAKE_GENERATOR="Unix Makefiles" \
          -v -e .
        python -m pip install -r requirements-dev.txt

    - name: Verify installation
      run: |
        python -c "import cuRBLAS; print('cuRBLAS imported successfully')" || echo "Import failed, continuing with tests..."

    - name: Run Python tests with coverage
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run C++ tests
      shell: bash
      working-directory: ${{ github.workspace }}/build_coverage
      run: ctest --output-on-failure || true

    - name: Collect C++ coverage report
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "Collecting coverage information..."
        # Check which build directories exist
        ls -la build* || echo "No build directories found"
        
        # Initialize coverage counters
        if [ -d "./build_coverage" ]; then
          echo "Processing build_coverage directory..."
          lcov --directory ./build_coverage --zerocounters || true
        fi
        if [ -d "./build_python" ]; then
          echo "Processing build_python directory..."
          lcov --directory ./build_python --zerocounters || true
        fi
        
        # Capture coverage data
        if [ -d "./build_coverage" ]; then
          lcov --directory ./build_coverage --capture --output-file coverage_cpp.info --ignore-errors mismatch,source || true
        fi
        if [ -d "./build_python" ]; then
          lcov --directory ./build_python --capture --output-file coverage_python.info --ignore-errors mismatch,source || true
        fi
        
        # Combine coverage files if they exist
        COVERAGE_FILES=""
        if [ -f "coverage_cpp.info" ]; then
          COVERAGE_FILES="$COVERAGE_FILES --add-tracefile coverage_cpp.info"
        fi
        if [ -f "coverage_python.info" ]; then
          COVERAGE_FILES="$COVERAGE_FILES --add-tracefile coverage_python.info"
        fi
        
        if [ -n "$COVERAGE_FILES" ]; then
          lcov $COVERAGE_FILES --output-file coverage.info --ignore-errors unused || true
          # Remove system and test files from coverage
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/test_*' '*/Catch2/*' '*/build_python/*' --output-file coverage_filtered.info --ignore-errors unused || true
          # List coverage info for debugging
          lcov --list coverage_filtered.info || true
        else
          echo "No coverage files found"
          touch coverage_filtered.info
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
        files: ./coverage_filtered.info,./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true