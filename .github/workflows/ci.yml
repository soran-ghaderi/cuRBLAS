name: CI

on:
  push:
    branches:
      - main
    pull_request:
      branches:
        - main
    # upon manual triggers
    workflow_dispatch:
# Centralize versions here to ensure all jobs are consistent.
# CUDA 11.8 is chosen for its broad driver compatibility on GitHub runners.
env:
  CUDA_VERSION: '11.8.0'
  CATCH2_VERSION: '3.6.0'

jobs:
  #################################################################
  # JOB 1: Build and run C++ tests on Linux and Windows           #
  #################################################################
  build-and-test:
    name: C++ Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Cache Catch2
        uses: actions/cache@v4
        id: cache-catch2
        with:
          # Cache the installed library/header files, not the source.
          path: |
            ${{ runner.os == 'Linux' && '/usr/local/lib/cmake/Catch2' || '' }}
            ${{ runner.os == 'Linux' && '/usr/local/include/catch2' || '' }}
            ${{ runner.os == 'Windows' && 'C:/Program Files (x86)/Catch2' || '' }}
          key: catch2-${{ env.CATCH2_VERSION }}-${{ runner.os }}

      # This single, unified step installs CUDA on both Linux and Windows.
      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.25
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: 'local'

      - name: Install Catch2 (Linux)
        if: runner.os == 'Linux' && steps.cache-catch2.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          git clone --depth 1 -b v${{ env.CATCH2_VERSION }} https://github.com/catchorg/Catch2.git ~/catch2
          cmake -S ~/catch2 -B ~/catch2/build -DBUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF
          sudo cmake --build ~/catch2/build --target install
          sudo ldconfig

      - name: Install Catch2 (Windows)
        if: runner.os == 'Windows' && steps.cache-catch2.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          git clone --depth 1 -b v${{ env.CATCH2_VERSION }} https://github.com/catchorg/Catch2.git $env:USERPROFILE\catch2
          cmake -S $env:USERPROFILE\catch2 -B $env:USERPROFILE\catch2\build -DBUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF
          cmake --build $env:USERPROFILE\catch2\build --config Release --target install

      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          # This simple call works because the cuda-toolkit action sets up the
          # environment for CMake to find CUDA automatically.
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_DOCS=OFF

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          # Use --config for multi-config generators like Visual Studio on Windows
          if [ "${{ runner.os }}" == "Windows" ]; then
            cmake --build . --parallel --config Debug
          else
            cmake --build . --parallel
          fi

      - name: Run C++ Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          # Use -C flag to specify config for CTest on Windows
          if [ "${{ runner.os }}" == "Windows" ]; then
            ctest --output-on-failure --parallel -C Debug
          else
            ctest --output-on-failure --parallel
          fi

  #################################################################
  # JOB 2: Build and run Python package tests on Linux and Windows #
  #################################################################
  python-testing:
    name: Python Tests on ${{ matrix.os }}
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ "3.11", "3.12" ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      # This single, unified step replaces the two separate, complex install scripts.
      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.25
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: 'local'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Test Python Package
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Install dev requirements first
          python -m pip install -r requirements-dev.txt
          # Install the current package in editable mode
          # The build system (e.g., scikit-build-core) will find CUDA automatically.
          python -m pip install -v -e .
          # Run tests
          pytest

  #################################################################
  # JOB 3: Run coverage tests on Linux                          #
  #################################################################
  coverage-test:
    name: Coverage Report
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y lcov

      # Use the same unified CUDA install step for consistency.
      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.25
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: 'local'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          python -m pip install pytest-cov

      - name: Configure and Build with Coverage Flags
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTING=ON \
            -DBUILD_DOCS=OFF \
            -DCMAKE_CXX_FLAGS="--coverage" \
            -DCMAKE_C_FLAGS="--coverage"
          cmake --build build --parallel

      - name: Run C++ Tests
        working-directory: build
        # Run tests but don't fail the job if tests fail, so we still get a coverage report.
        run: ctest --output-on-failure || true

      - name: Install Python Package with Coverage
        run: |
          # Set flags for the Python build to also generate coverage data
          export CMAKE_ARGS="-DCMAKE_C_FLAGS=--coverage -DCMAKE_CXX_FLAGS=--coverage"
          python -m pip install -v -e .

      - name: Run Python tests and generate XML report
        run: pytest --cov=. --cov-report=xml

      - name: Generate C++ Coverage Report (lcov)
        working-directory: ${{ github.workspace }}
        run: |
          lcov --capture --directory build --output-file coverage.info
          # Remove noise from the coverage report
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/build/*' --output-file coverage_filtered.info

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # The action will automatically find coverage.xml and *cov*.info files
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false # Optional: prevents CI failure if Codecov upload fails
          verbose: true