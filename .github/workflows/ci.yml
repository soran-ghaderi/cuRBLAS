name: CI

on:
  # We run CI on pushes to the main branch
  push:
    branches:
      - main
  # and on all pull requests to the main branch
  pull_request:
    branches:
      - main
  # as well as upon manual triggers through the 'Actions' tab of the Github UI
  workflow_dispatch:

env:
  CATCH2_VERSION: 3.6.0

jobs:
  build-and-test:
    name: Testing on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit (Linux/Windows)
      if: runner.os != 'macOS'
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: false

    - name: Verify CUDA installation
      if: runner.os != 'macOS'
      run: nvcc --version

    - name: Install Catch2 (Linux + MacOS)
      if: runner.os != 'Windows'
      run: |
        git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release ..
        sudo cmake --build . --target install

    - name: Install Catch2 (Windows)  
      if: runner.os == 'Windows'
      run: |
        git clone -b v$Env:CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --target install --config Release

    - name: make build directory
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOCS=OFF -DBUILD_TESTING=ON

    - name: build
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: ctest

  python-testing:
    name: Python package testing on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: false

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Run Python tests
      shell: bash
      run: |
        python -m pip install .
        python -m pip install -r requirements-dev.txt
        pytest

  coverage-test:
    name: Coverage Testing
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.25
      id: cuda-toolkit
      with:
        cuda: '12.5.0'
        method: 'network'
        use-github-cache: false

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Install Catch2 with proper configuration
      run: |
        git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git
        cd Catch2
        mkdir build
        cd build
        cmake -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCATCH_INSTALL_DOCS=OFF ..
        sudo cmake --build . --target install

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install scikit-build-core pybind11[global]

    - name: Configure and build with coverage
      run: |
        mkdir -p ${{ github.workspace }}/build
        cd ${{ github.workspace }}/build
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_DOCS=OFF \
          -DBUILD_TESTING=ON \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_C_FLAGS="--coverage"
        cmake --build .

    - name: Install Python package in development mode
      run: |
        python -m pip install --no-build-isolation \
          --config-settings=build-dir="${{ github.workspace }}/build" \
          --config-settings=cmake.define.CMAKE_CXX_FLAGS="--coverage" \
          --config-settings=cmake.define.BUILD_TESTING="ON" \
          -v -e .
        python -m pip install -r requirements-dev.txt
    
    - name: Run Python tests with coverage
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Run C++ tests
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure || true

    - name: Collect C++ coverage report
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        # Initialize coverage counters
        lcov --directory ./build --zerocounters || true
        # Capture coverage data
        lcov --directory ./build --capture --output-file coverage.info --ignore-errors mismatch,source || true
        # Remove system and test files from coverage
        lcov --remove coverage.info '/usr/*' '*/tests/*' '*/test_*' '*/Catch2/*' --output-file coverage_filtered.info --ignore-errors unused || true
        # List coverage info for debugging
        lcov --list coverage_filtered.info || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
        files: ./coverage_filtered.info,./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true