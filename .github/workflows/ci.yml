name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  CUDA_VERSION: '12.2.0'  # Updated to a more recent stable version
  CATCH2_VERSION: '3.6.0'

jobs:
  #################################################################
  # JOB 1: Build and run C++ tests on Linux and Windows           #
  #################################################################
  build-and-test:
    name: C++ Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Use ubuntu-20.04 for better CUDA compatibility
        os: [ ubuntu-20.04, windows-2022 ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Cache Catch2
        uses: actions/cache@v4
        id: cache-catch2
        with:
          path: |
            ${{ runner.os == 'Linux' && '/usr/local/lib/cmake/Catch2' || '' }}
            ${{ runner.os == 'Linux' && '/usr/local/include/catch2' || '' }}
            ${{ runner.os == 'Windows' && 'C:/Program Files (x86)/Catch2' || '' }}
          key: catch2-${{ env.CATCH2_VERSION }}-${{ runner.os }}

      - name: Install CUDA Toolkit (Linux)
        if: runner.os == 'Linux'
        run: |
          # Remove any existing CUDA installations
          sudo apt-get remove --purge '^nvidia-.*' '^libnvidia-.*' '^cuda-.*' || true
          sudo apt-get autoremove || true
          sudo apt-get autoclean || true
          
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 software-properties-common
          
          # Add NVIDIA GPG key and repository for Ubuntu 20.04
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          
          # Install specific CUDA version
          sudo apt-get install -y cuda-toolkit-12-2
          
          # Set environment variables
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install CUDA Toolkit (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Download and install CUDA 12.2.0 for Windows
          $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/12.2.0/local_installers/cuda_12.2.0_537.13_windows.exe"
          $cudaInstaller = "$env:TEMP\cuda_installer.exe"
          
          Write-Host "Downloading CUDA installer..."
          Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
          
          Write-Host "Installing CUDA (this may take several minutes)..."
          Start-Process -FilePath $cudaInstaller -ArgumentList "-s" -Wait -NoNewWindow
          
          # Set environment variables
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2" >> $env:GITHUB_ENV
          echo "CUDA_PATH_V12_2=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2" >> $env:GITHUB_ENV
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\libnvvp" >> $env:GITHUB_PATH

      - name: Verify CUDA Installation
        run: |
          nvcc --version
        shell: bash

      - name: Install Catch2 (Linux)
        if: runner.os == 'Linux' && steps.cache-catch2.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential
          git clone --depth 1 -b v${{ env.CATCH2_VERSION }} https://github.com/catchorg/Catch2.git ~/catch2
          cmake -S ~/catch2 -B ~/catch2/build -DBUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF
          sudo cmake --build ~/catch2/build --target install
          sudo ldconfig

      - name: Install Catch2 (Windows)
        if: runner.os == 'Windows' && steps.cache-catch2.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          git clone --depth 1 -b v${{ env.CATCH2_VERSION }} https://github.com/catchorg/Catch2.git $env:USERPROFILE\catch2
          cmake -S $env:USERPROFILE\catch2 -B $env:USERPROFILE\catch2\build -DBUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF
          cmake --build $env:USERPROFILE\catch2\build --config Release --target install

      - name: Configure and Build
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_DOCS=OFF
          cmake --build build --parallel --config Debug

      - name: Run C++ Tests
        working-directory: build
        run: ctest --output-on-failure --parallel -C Debug

  #################################################################
  # JOB 2: Build and run Python package tests                     #
  #################################################################
  python-testing:
    name: Python Tests on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-2022 ]
        python-version: [ "3.11" ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install CUDA Toolkit (Linux)
        if: runner.os == 'Linux'
        run: |
          # Remove any existing CUDA installations
          sudo apt-get remove --purge '^nvidia-.*' '^libnvidia-.*' '^cuda-.*' || true
          sudo apt-get autoremove || true
          sudo apt-get autoclean || true
          
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 software-properties-common
          
          # Add NVIDIA GPG key and repository for Ubuntu 20.04
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          
          # Install specific CUDA version
          sudo apt-get install -y cuda-toolkit-12-2
          
          # Set environment variables
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install CUDA Toolkit (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Download and install CUDA 12.2.0 for Windows
          $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/12.2.0/local_installers/cuda_12.2.0_537.13_windows.exe"
          $cudaInstaller = "$env:TEMP\cuda_installer.exe"
          
          Write-Host "Downloading CUDA installer..."
          Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
          
          Write-Host "Installing CUDA (this may take several minutes)..."
          Start-Process -FilePath $cudaInstaller -ArgumentList "-s" -Wait -NoNewWindow
          
          # Set environment variables
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2" >> $env:GITHUB_ENV
          echo "CUDA_PATH_V12_2=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2" >> $env:GITHUB_ENV
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\libnvvp" >> $env:GITHUB_PATH

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Test Python Package
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          python -m pip install -v -e .
          pytest

  #################################################################
  # JOB 3: Run coverage tests on Linux                          #
  #################################################################
  coverage-test:
    name: Coverage Report
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Install CUDA Toolkit
        run: |
          # Remove any existing CUDA installations
          sudo apt-get remove --purge '^nvidia-.*' '^libnvidia-.*' '^cuda-.*' || true
          sudo apt-get autoremove || true
          sudo apt-get autoclean || true
          
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 software-properties-common
          
          # Add NVIDIA GPG key and repository for Ubuntu 20.04
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          
          # Install specific CUDA version
          sudo apt-get install -y cuda-toolkit-12-2
          
          # Set environment variables
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install Python Dependencies
        run: python -m pip install --upgrade pip setuptools wheel pytest pytest-cov -r requirements-dev.txt

      - name: Configure and Build with Coverage Flags
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON \
            -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage"
          cmake --build build --parallel

      - name: Run C++ Tests
        working-directory: build
        run: ctest --output-on-failure || true

      - name: Install Python Package with Coverage
        run: |
          export CMAKE_ARGS="-DCMAKE_C_FLAGS=--coverage -DCMAKE_CXX_FLAGS=--coverage"
          python -m pip install -v -e .

      - name: Run Python tests and generate XML report
        run: pytest --cov=. --cov-report=xml

      - name: Generate C++ Coverage Report (lcov)
        run: |
          lcov --capture --directory build --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/build/*' --output-file coverage_filtered.info

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true