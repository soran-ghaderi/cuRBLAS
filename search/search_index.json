{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cuRBLAS","text":"<ul> <li> <p> High Performance</p> <p>Optimized CUDA kernels for maximum throughput on NVIDIA GPUs with support for modern GPU architectures.</p> <p> Getting Started</p> </li> <li> <p> Randomized Algorithms</p> <p>Efficient approximation algorithms for large-scale matrix computations with configurable accuracy levels.</p> <p> User Guide</p> </li> <li> <p> Easy Integration</p> <p>C API compatible with existing BLAS workflows, plus Python bindings for rapid prototyping.</p> <p> API Reference</p> </li> <li> <p> Memory Efficient</p> <p>Reduced memory footprint through sketching techniques, enabling computations on larger matrices.</p> <p> Examples</p> </li> </ul>"},{"location":"#what-is-curblas","title":"What is cuRBLAS?","text":"<p>cuRBLAS (CUDA Randomized BLAS) is a high-performance library for randomized linear algebra operations on NVIDIA GPUs. It provides implementations of randomized algorithms for common matrix operations, offering significant speedups for large-scale computations.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Matrix Multiplication (RGEMM): Randomized general matrix multiplication with configurable accuracy</li> <li>Singular Value Decomposition (RSVD): Fast approximate SVD using randomized methods  </li> <li>QR Decomposition (RQR): Efficient randomized QR factorization</li> <li>Multiple Precision Support: Single and double precision floating-point operations</li> <li>Flexible Sketching: Various sketching methods (Gaussian, Rademacher, SRHT, CountSketch)</li> <li>CUDA Integration: Seamless integration with existing CUDA workflows</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"C APIPython <pre><code>#include &lt;cuRBLAS/curblas.h&gt;\n\n// Create cuRBLAS handle\ncurblasHandle_t handle;\ncurblasCreate(&amp;handle);\n\n// Set accuracy level\ncurblasSetAccuracy(handle, CURBLAS_ACCURACY_HIGH);\n\n// Perform randomized GEMM: C = \u03b1\u00b7A\u00b7B + \u03b2\u00b7C\ncurblasRgemm(handle, \n             CURBLAS_OP_N, CURBLAS_OP_N,\n             m, n, k,\n             &amp;alpha, A, lda, \n             B, ldb,\n             &amp;beta, C, ldc,\n             CURBLAS_SKETCH_GAUSSIAN, 0);\n\n// Cleanup\ncurblasDestroy(handle);\n</code></pre> <pre><code>import curblas\nimport numpy as np\n\n// Create arrays on GPU\nA = cp.random.random((1000, 500), dtype=cp.float32)\nB = cp.random.random((500, 800), dtype=cp.float32)\n\n// Randomized matrix multiplication\nC = curblas.rgemm(A, B, accuracy='high', sketch='gaussian')\n</code></pre>"},{"location":"#performance-benefits","title":"Performance Benefits","text":"<p>Randomized algorithms can provide significant performance improvements, especially for:</p> <ul> <li>Large matrices where exact computation is prohibitively expensive</li> <li>Low-rank or approximately low-rank matrices where high accuracy is maintained</li> <li>Applications that can tolerate controlled approximation errors</li> <li>Memory-constrained environments where sketching reduces memory usage</li> </ul> <p>When to Use cuRBLAS</p> <p>cuRBLAS is ideal when you need fast matrix computations and can accept small, controlled approximation errors. It's particularly effective for:</p> <ul> <li>Machine learning applications (PCA, matrix factorization)</li> <li>Scientific computing (solving large linear systems)</li> <li>Data analysis (dimensionality reduction)</li> <li>Signal processing (fast transforms)</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install cuRBLAS - Download and install the library</li> <li>Quick Start Guide - Basic usage examples</li> <li>API Reference - Complete function documentation</li> <li>Examples - Real-world usage scenarios</li> </ol>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository: cuRBLAS/cuRBLAS</li> <li>Issue Tracker: Report bugs and request features</li> <li>Discussions: Ask questions and share experiences</li> <li>Contributing: Help improve cuRBLAS</li> </ul>"},{"location":"#latest-release","title":"Latest Release","text":"<p>Version 0.0.1 - Development</p> <p>Initial development version with core randomized BLAS operations.</p> <p>Download</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Complete API reference and user guides available.</p> <p>Browse Docs</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#overview","title":"Overview","text":""},{"location":"api/#namespaces","title":"Namespaces","text":"<ul> <li>cuRBLAS - </li> </ul>"},{"location":"api/#structures","title":"Structures","text":"<ul> <li>curblasContext - </li> </ul>"},{"location":"api/curblas/","title":"cuRBLAS","text":""},{"location":"api/curblas/#functions","title":"Functions","text":""},{"location":"api/curblas/#add_one","title":"add_one","text":"<pre><code>int add_one(int x)\n</code></pre> <p>A very interesting function!</p> <p>Description:</p> <p>This function is of course just a self-explanatory placeholder, but surprisingly often, things aren't this easy. You should therefore really document your C++ code with Doxygen! x The number to increase the successor of x</p> <p>Parameters:</p> <ul> <li><code>x</code> (int): </li> </ul>"},{"location":"api/curblascontext/","title":"curblasContext","text":""},{"location":"api/curblascontext/#description","title":"Description","text":"<p>Internal cuRBLAS context structure</p>"},{"location":"api/curblascontext/#functions","title":"Functions","text":""},{"location":"api/curblascontext/#curblascontext_1","title":"curblasContext","text":"<pre><code> curblasContext()\n</code></pre>"},{"location":"api/curblascontext/#variables","title":"Variables","text":""},{"location":"api/curblascontext/#stream","title":"stream","text":"<pre><code>cudaStream_t stream\n</code></pre>"},{"location":"api/curblascontext/#ownsstream","title":"ownsStream","text":"<pre><code>bool ownsStream\n</code></pre>"},{"location":"api/curblascontext/#rng","title":"rng","text":"<pre><code>curblasRngState* rng\n</code></pre> <p>Custom random number generator state optimized for CUDA devices</p>"},{"location":"api/curblascontext/#seed","title":"seed","text":"<pre><code>unsigned long long seed\n</code></pre>"},{"location":"api/curblascontext/#accuracy","title":"accuracy","text":"<pre><code>curblasAccuracy_t accuracy\n</code></pre>"},{"location":"api/curblascontext/#defaultsketchtype","title":"defaultSketchType","text":"<pre><code>curblasSketchType_t defaultSketchType\n</code></pre>"},{"location":"api/curblascontext/#mathmode","title":"mathMode","text":"<pre><code>curblasMath_t mathMode\n</code></pre>"},{"location":"api/curblascontext/#deviceid","title":"deviceId","text":"<pre><code>int deviceId\n</code></pre>"},{"location":"api/curblascontext/#version","title":"version","text":"<pre><code>int version\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#quick-installation","title":"Quick Installation","text":"<p>Currently cuRBLAS is in development. To install and use cuRBLAS:</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>CUDA Toolkit 12.0 or later</li> <li>CMake 3.18 or later</li> <li>C++17 compatible compiler</li> </ul>"},{"location":"getting-started/installation/#building-from-source","title":"Building from Source","text":"<pre><code>git clone https://github.com/cuRBLAS/cuRBLAS.git\ncd curblas\nmkdir build &amp;&amp; cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake -j$(nproc)\n</code></pre>"},{"location":"getting-started/installation/#installation_1","title":"Installation","text":"<pre><code>sudo make install\n</code></pre> <p>More detailed installation instructions coming soon. </p>"}]}